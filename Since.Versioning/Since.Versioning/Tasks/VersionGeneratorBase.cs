using System;
using System.Reflection;
using Since.Extensions;

namespace Since.Tasks
{
    public abstract class VersionGeneratorBase
    {        
        public string ActiveFile { get; set; }

        public Git Git
            => this.Lazy(() => new Git(this.ActiveFile));

        public abstract void Initialize(out Version version, ref bool published);

        public string Execute()
        {
            Version version;
            bool published = false;
            Initialize(out version, ref published);

            var output =
                $"/*\n" +
                $"    Generated by {Assembly.GetExecutingAssembly().FullName}\n" +
                $"        from {this.ActiveFile}\n" +
                $"*/\n" +
                $"using System.Reflection;\n\n" +

                $"[assembly: AssemblyVersion(\"{this.AssemblyVersion(version, published)}\")]\n" +
                $"[assembly: AssemblyFileVersion(\"{this.AssemblyFileVersion(version, published)}\")]\n" +
                $"[assembly: AssemblyInformationalVersion(\"{this.AssemblyInformationalVersion(version, published)}\")]\n";

            return output;
        }

        public string AssemblyVersion(Version version, bool published)
            => published ? version.GetVersionString(3) : version.GetVersionString();            

        public string AssemblyFileVersion(Version version, bool published)
            => version.GetVersionString();

        public string AssemblyInformationalVersion(Version version, bool published)
            => version.ToString(published);

        public static string Join(params object[] values)
        {
            string result = String.Empty;
            foreach (var value in values)
            {
                if (value == null)
                    return null;
                string sep = String.IsNullOrEmpty(result) || String.IsNullOrEmpty(value.ToString()) ? "" : ".";
                result += sep + value;
            }
            return result;
        }
    }
}
